{
  "version": 3,
  "file": "html.js",
  "sourceRoot": "..",
  "sources": [
    "src/html.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DATOM/HTML'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n{ jr, }                   = CND\n#...........................................................................................................\n@types                    = require './types'\n{ isa\n  validate\n  cast\n  declare\n  declare_cast\n  check\n  sad\n  is_sad\n  is_happy\n  type_of }               = @types\n#...........................................................................................................\n@isa                      = isa\n@validate                 = validate\n@check                    = check\n@cast                     = cast\n\n\n#-----------------------------------------------------------------------------------------------------------\n@_escape_text = ( x ) ->\n  R           = x\n  R           = R.replace /&/g,   '&amp;'\n  R           = R.replace /</g,   '&lt;'\n  R           = R.replace />/g,   '&gt;'\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_as_attribute_literal = ( x ) ->\n  R           = if isa.text x then x else JSON.stringify x\n  must_quote  = not @isa._datom_html_naked_attribute_text R\n  R           = @_escape_text R\n  R           = R.replace /'/g,   '&#39;'\n  R           = R.replace /\\n/g,  '&#10;'\n  R           = \"'\" + R + \"'\" if must_quote\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@cast.html = ( d ) =>\n  validate.datom_datom d\n  atxt        = ''\n  sigil       = d.$key[ 0 ]\n  tagname     = d.$key[ 1 .. ]\n  #.........................................................................................................\n  switch sigil\n    when '[' then [ sigil, tagname, ] = [ '<', \"sys:#{tagname}\", ]\n    when '~' then [ sigil, tagname, ] = [ '^', \"sys:#{tagname}\", ]\n    when ']' then [ sigil, tagname, ] = [ '>', \"sys:#{tagname}\", ]\n  #.........................................................................................................\n  return ( @_escape_text d.text ? '' )    if ( sigil is '^' ) and ( tagname is 'text' )\n  return \"</#{tagname}>\"                  if sigil is '>'\n  #.........................................................................................................\n  ### NOTE sorting atxt by keys to make result predictable: ###\n  if @isa.object d.$value then  src = d.$value\n  else                          src = d\n  for key in ( Object.keys src ).sort()\n    continue if key.startsWith '$'\n    if ( value = src[ key ] ) is true then  atxt += \" #{key}\"\n    else                                    atxt += \" #{key}=#{@_as_attribute_literal value}\"\n  #.........................................................................................................\n  slash = if sigil is '<' then '' else '/'\n  return \"<#{tagname}#{slash}>\" if atxt is ''\n  return \"<#{tagname}#{atxt}#{slash}>\"\n\n\n\n\n############################################################################################################\nif module is require.main then do => # await do =>\n  help 'ok'\n\n"
  ]
}