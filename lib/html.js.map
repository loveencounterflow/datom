{
  "version": 3,
  "file": "html.js",
  "sourceRoot": "..",
  "sources": [
    "src/html.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DATOM/HTML'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n{ jr, }                   = CND\n#...........................................................................................................\n@types                    = require './types'\n{ isa\n  validate\n  cast\n  declare\n  declare_cast\n  check\n  sad\n  is_sad\n  is_happy\n  type_of }               = @types\n#...........................................................................................................\n@isa                      = isa\n@validate                 = validate\n@check                    = check\n@cast                     = cast\n\n\n#-----------------------------------------------------------------------------------------------------------\n@_escape_text = ( x ) ->\n  R           = x\n  R           = R.replace /&/g,   '&amp;'\n  R           = R.replace /</g,   '&lt;'\n  R           = R.replace />/g,   '&gt;'\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_as_attribute_literal = ( x ) ->\n  R           = if isa.text x then x else JSON.stringify x\n  must_quote  = not @isa._datom_html_naked_attribute_text R\n  R           = @_escape_text R\n  R           = R.replace /'/g,   '&#39;'\n  R           = R.replace /\\n/g,  '&#10;'\n  R           = \"'\" + R + \"'\" if must_quote\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@cast.html = ( d ) =>\n  validate.datom_datom d\n  atxt        = ''\n  sigil       = d.$key[ 0 ]\n  tagname     = d.$key[ 1 .. ]\n  x_key       = null\n  #.........................................................................................................\n  ### TAINT simplistic solution; namespace might already be taken? ###\n  if sigil in '[~]'\n    switch sigil\n      when '[' then sigil = '<'\n      when '~' then sigil = '^'\n      when ']' then sigil = '>'\n    [ x_key, tagname, ] = [ tagname, 'x-sys', ]\n  #.........................................................................................................\n  return ( @_escape_text d.text ? '' )      if ( sigil is '^' ) and ( tagname is 'text'     )\n  return (               d.text ? '' )      if ( sigil is '^' ) and ( tagname is 'raw'      )\n  return \"<!DOCTYPE #{d.$value ? 'html'}>\"  if ( sigil is '^' ) and ( tagname is 'doctype'  )\n  return \"</#{tagname}>\"                    if sigil is '>'\n  #.........................................................................................................\n  ### NOTE sorting atxt by keys to make result predictable: ###\n  if @isa.object d.$value then  src = d.$value\n  else                          src = d\n  atxt += \" x-key=#{@_as_attribute_literal x_key}\" if x_key?\n  for key in ( Object.keys src ).sort()\n    continue if key.startsWith '$'\n    if ( value = src[ key ] ) is true then  atxt += \" #{key}\"\n    else                                    atxt += \" #{key}=#{@_as_attribute_literal value}\"\n  #.........................................................................................................\n  ### TAINT make self-closing elements configurable, depend on HTML5 type ###\n  slash     = if sigil is '<' then '' else \"</#{tagname}>\"\n  x_sys_key = if x_key? then \"<x-sys-key>#{x_key}</x-sys-key>\" else ''\n  return \"<#{tagname}>#{slash}#{x_sys_key}\" if atxt is ''\n  return \"<#{tagname}#{atxt}>#{x_sys_key}#{slash}\"\n  # slash = if sigil is '<' then '' else '/'\n  # return \"<#{tagname}#{slash}>\" if atxt is ''\n  # return \"<#{tagname}#{atxt}#{slash}>\"\n\n\n\n\n############################################################################################################\nif module is require.main then do => # await do =>\n  help 'ok'\n\n"
  ]
}