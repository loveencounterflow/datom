{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DATOM/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ assign\n  copy\n  jr }                    = CND\n#...........................................................................................................\nMultimix                  = require 'multimix'\n@types                    = require './types'\n{ isa\n  validate\n  defaults\n  type_of }               = @types\nLFT                       = require 'letsfreezethat'\nLFT_nofreeze              = LFT.nofreeze\n@_copy                    = LFT_nofreeze._copy.bind LFT\n{ Cupofjoe }              = require 'cupofjoe'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@freeze = ( d ) -> if @settings.freeze then LFT.freeze d else LFT_nofreeze.freeze d\n@thaw   = ( d ) -> if @settings.freeze then LFT.thaw   d else LFT_nofreeze.thaw   d\n\n#-----------------------------------------------------------------------------------------------------------\n@lets = ( original, modifier ) ->\n  unless @settings.freeze\n    draft = @_copy original\n    if modifier?\n      modifier draft\n      ### TAINT simplify logic by rewriting as single term without double negatives ###\n      if @settings.dirty\n        draft.$dirty = true unless draft.$dirty isnt original.dirty\n    return draft\n  #.........................................................................................................\n  draft = @thaw original\n  if modifier?\n    modifier draft\n    ### TAINT simplify logic by rewriting as single term without double negatives ###\n    if @settings.dirty\n      draft.$dirty = true unless draft.$dirty isnt original.dirty\n  return @freeze draft\n\n#-----------------------------------------------------------------------------------------------------------\n@set = ( d, k, P... ) ->\n  if isa.text k\n    throw new Error \"µ67663 expected 1 value got #{count}\" unless ( count = P.length ) is 1\n    return @lets d, ( d ) -> d[ k ] = P[ 0 ]\n  return @lets d, ( d ) -> d[ k ]  = v for k, v of assign {}, k, P...\n\n#-----------------------------------------------------------------------------------------------------------\n@unset = ( d, k ) -> @lets d, ( d ) -> delete d[ k ]\n\n#-----------------------------------------------------------------------------------------------------------\n@stamp = ( d, P... ) ->\n  ### Set the `$stamped` attribute on datom to sigil it as processed. Stamped datoms will not be selected\n  by the `select` method unless tag '#stamped' is used. ###\n  return @lets d, ( d ) -> assign d, P..., { $stamped: true, }\n\n#-----------------------------------------------------------------------------------------------------------\n@unstamp = ( d ) ->\n  return d unless d.$stamped\n  return @lets d, ( d ) -> delete d.$stamped\n\n#-----------------------------------------------------------------------------------------------------------\n@is_system = ( d ) ->\n  ### Return whether datom is a system datom (i.e. whether its `sigil` equals `'~'`). ###\n  return d.$key.match /^[~\\[\\]]/\n\n#-----------------------------------------------------------------------------------------------------------\n@is_stamped = ( d ) -> d.$stamped ? false ### i.e. already processed? ###\n@is_fresh   = ( d ) -> d.$fresh   ? false ### i.e. created within stream? ###\n@is_dirty   = ( d ) -> d.$dirty   ? false ### i.e. modified? ###\n@is_datom   = ( x ) -> isa.datom_datom x\n\n#-----------------------------------------------------------------------------------------------------------\n@new_datom = ( $key, $value, other... ) ->\n  ### When `other` contains a key `$`, it is treated as a hint to copy\n  system-level attributes; if the value of key `$` is a POD that has itself a\n  key `$`, then a copy of that value is used. This allows to write `new_datom\n  ..., $: d` to copy system-level attributes such as source locations to a new\n  datom. ###\n  validate.datom_key $key\n  return @_new_datom $key, $value, other...\n\n#-----------------------------------------------------------------------------------------------------------\n@_new_datom = ( $key, $value, other... ) ->\n  if $value?\n    $value  = { $value, } if ( not @settings.merge_values ) or ( not isa.object $value )\n    throw new Error \"µ55632 value must not have attribute '$key'\" if '$key' in Object.keys $value\n    R       = assign {}, $value,  other..., { $key, }\n  else\n    R       = assign {},          other..., { $key, }\n  while ( isa.object R.$ ) and ( isa.object R.$.$ ) then R.$ = copy R.$.$\n  return @freeze R\n\n#-----------------------------------------------------------------------------------------------------------\n@fresh_datom = ( P... ) -> @new_datom P..., { $fresh: true, }\n\n#-----------------------------------------------------------------------------------------------------------\n@wrap_datom = ( $key, $value ) ->\n  ### TAINT code duplication ###\n  validate.datom_key    $key\n  validate.datom_datom  $value\n  R = assign {}, { $key, $value, }\n  while ( isa.object R.$ ) and ( isa.object R.$.$ ) then R.$ = copy R.$.$\n  return @freeze R\n\n#-----------------------------------------------------------------------------------------------------------\n@new_single_datom = ( name, P... ) -> validate.datom_name name; @_new_datom \"^#{name}\",  P...\n@new_open_datom   = ( name, P... ) -> validate.datom_name name; @new_datom  \"<#{name}\",  P...\n@new_close_datom  = ( name, P... ) -> validate.datom_name name; @new_datom  \">#{name}\",  P...\n@new_system_datom = ( name, P... ) -> validate.datom_name name; @new_datom  \"~#{name}\",  P...\n@new_text_datom   = (       P... ) -> @new_single_datom  'text', P...\n@new_end_datom    =                -> @new_system_datom  'end'\n# @new_flush_datom    =                           -> @new_system_datom  'flush'\n\n#-----------------------------------------------------------------------------------------------------------\n@new_warning = ( ref, message, d, other...  ) ->\n  @new_system_datom 'warning', d, { ref, message, }, other...\n\n\n#===========================================================================================================\n# SELECT\n#-----------------------------------------------------------------------------------------------------------\np1 = /// # `\\x23` used instead of `\\#` which causes syntax error (???)\n  ^\n    (?<skey>\n      (?<sigil>            [  < ^ > \\[ ~ \\] \\x23 ]  )\n      (?<key>              [^ < ^ > \\[ ~ \\] \\x23 ]* )\n    )\n  $ ///u\np2 = /// # `\\x23` used instead of `\\#` which causes syntax error (???)\n  ^\n    (?<skey>\n      (?<sigil>            [  < ^ > \\[ ~ \\] \\x23 ]  )\n      (?<key>              [^ < ^ > \\[ ~ \\] \\x23 ]* )\n    ) \\x23\n    (?<attribute>        [^ < ^ > \\[ ~ \\] \\x23 ]+ ) :\n    (?<value>            [^ < ^ > \\[ ~ \\] \\x23 ]+ )\n  $ ///u\n\n#-----------------------------------------------------------------------------------------------------------\n@select = ( d, selector ) ->\n  throw new Error \"µ86606 expected a selector, got none\" unless selector?\n  return false unless ( ( isa.object d ) and ( d.$key? ) )\n  #.........................................................................................................\n  unless ( match = ( selector.match p2 ) ? ( selector.match p1 ) )?\n    throw new Error \"µ37799 illegal selector #{rpr selector}\"\n  g       = {}\n  g[ k ]  = v for k, v of match.groups when v isnt ''\n  if g.attribute? and ( g.attribute isnt 'stamped' )\n    throw new Error \"µ77764 unknown attribute name #{rpr g.attribute}\"\n  switch g.value\n    when undefined      then stamped_values = [       false, ]\n    when '*'            then stamped_values = [ true, false, ]\n    when 'true'         then stamped_values = [ true,        ]\n    when 'false'        then stamped_values = [       false, ]\n    else throw new Error \"µ33366 illegal attribute or value in selector #{rpr selector}\"\n  #.........................................................................................................\n  return false if ( d.$stamped ? false ) not in stamped_values\n  return ( d.$key is g.skey ) if g.key?\n  return false unless d.$key.startsWith g.sigil\n  return true\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass @Cupofdatom extends Cupofjoe\n  _defaults: { flatten: true, absorb: true, DATOM: null, }\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( settings ) ->\n    super settings\n    @settings         = Object.assign @settings, @_defaults\n    @settings.DATOM  ?= module.exports\n\n  #---------------------------------------------------------------------------------------------------------\n  _analyze: ( name, tail ) ->\n    ### NOTE to be overriden by derivatives as seen necessary ###\n    attributes  = []\n    content     = []\n    for part, idx in tail\n      switch type = type_of part\n        when 'object'   then  attributes.push part\n        when 'function' then  content.push part ### NOTE always leave as-is, expanded by Cupofjoe ###\n        when 'text'     then  content.push @settings.DATOM.new_single_datom 'text',  { text: part, }\n        else                  content.push @settings.DATOM.new_single_datom 'value', { $value: part, }\n    return { name, attributes, content, }\n\n  #---------------------------------------------------------------------------------------------------------\n  cram: ( name, tail... ) ->\n    # XXX_SUPER = @Cupofjoe.\n    { name, attributes, content, } = @_analyze name, tail\n    has_attributes = false\n    #.......................................................................................................\n    if attributes? and attributes.length > 0\n      has_attributes  = true\n      attributes      = Object.assign {}, attributes...\n    #.......................................................................................................\n    if has_attributes and name is null\n      v = rpr { name, attributes, content, }\n      throw new Error \"^datom/cupofjoe@3498^ cannot have attributes without name, got #{v}\"\n    #.......................................................................................................\n    if content? and content.length > 0\n      return super.cram content... if name is null\n      if has_attributes then  d1 = @settings.DATOM.new_open_datom name, attributes\n      else                    d1 = @settings.DATOM.new_open_datom name\n      return super.cram d1, content..., ( @settings.DATOM.new_close_datom name )\n    #.......................................................................................................\n    if has_attributes\n      return super.cram @settings.DATOM.new_single_datom name, attributes\n    return super.cram @settings.DATOM.new_single_datom name if name isnt null\n    return null\n\n\n#===========================================================================================================\n# EXPORT\n#-----------------------------------------------------------------------------------------------------------\nMAIN = @\nclass Datom extends Multimix\n  @include MAIN,                              { overwrite: false, }\n  @include ( require './xemitter.mixin' ),    { overwrite: false, }\n  # @include ( require './cachewalker.mixin' ), { overwrite: false, }\n  # @include ( require './_temp_svgttf' ),      { overwrite: false, } ### !!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n  # @extend MAIN, { overwrite: false, }\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( settings = null ) ->\n    super()\n    validate.datom_settings settings = { defaults.settings..., settings..., }\n    @settings = LFT.freeze settings\n    @VNR      = require './vnr'\n    @Datom    = Datom\n    return @\n\nmodule.exports = new Datom()\n\n\n\n\n"
  ]
}