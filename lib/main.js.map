{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'DATOM'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n{ assign }                = Object\n#...........................................................................................................\n{ get_base_types }        = require './types'\nletsfreezethat            = require 'letsfreezethat'\nletsfreezethat_nofreeze   = require 'letsfreezethat/nofreeze'\nmatcher_cache             = new Map()\n\n\n\n#===========================================================================================================\n# EXPORT\n#-----------------------------------------------------------------------------------------------------------\nMAIN = @\nclass Datom\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg = null ) ->\n    # super()\n    @types    = get_base_types()\n    @cfg      = letsfreezethat.freeze @types.create.datom_constructor_cfg cfg\n    @LFT      = if @cfg.freeze then letsfreezethat else letsfreezethat_nofreeze\n    @freeze   = @LFT.freeze\n    @thaw     = @LFT.thaw\n    GUY.props.hide @, 'matcher_cache', matcher_cache\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  lets: ( original, modifier ) =>\n    draft = @thaw original\n    if modifier?\n      modifier draft\n      ### TAINT simplify logic by rewriting as single term without double negatives ###\n      if @cfg.dirty\n        draft.$dirty = true unless draft.$dirty isnt original.dirty\n    return @freeze draft\n\n  #---------------------------------------------------------------------------------------------------------\n  set: ( d, k, P... ) =>\n    if @types.isa.text k\n      throw new Error \"Âµ67663 expected 1 value got #{count}\" unless ( count = P.length ) is 1\n      return @lets d, ( d ) -> d[ k ] = P[ 0 ]\n    return @lets d, ( d ) -> d[ k ]  = v for k, v of assign {}, k, P...\n\n  #---------------------------------------------------------------------------------------------------------\n  unset: ( d, k ) => @lets d, ( d ) -> delete d[ k ]\n\n  #---------------------------------------------------------------------------------------------------------\n  stamp: ( d, P... ) =>\n    ### Set the `$stamped` attribute on datom to mark it as processed. Stamped datoms will not be selected\n    by the `select` method unless tag '#stamped' is used. ###\n    return @lets d, ( d ) -> assign d, P..., { $stamped: true, }\n\n  #---------------------------------------------------------------------------------------------------------\n  unstamp: ( d ) =>\n    return d unless d.$stamped\n    return @lets d, ( d ) -> delete d.$stamped\n\n  #---------------------------------------------------------------------------------------------------------\n  is_stamped: ( d ) => d.$stamped ? false ### i.e. already processed? ###\n  is_fresh:   ( d ) => d.$fresh   ? false ### i.e. created within stream? ###\n  is_dirty:   ( d ) => d.$dirty   ? false ### i.e. modified? ###\n  is_datom:   ( x ) => @types.isa.datom_datom x\n\n  #---------------------------------------------------------------------------------------------------------\n  new_datom: ( $key, P... ) =>\n    @types.validate.datom_key $key\n    return @freeze assign { $key, }, P..., { $key, }\n\n  #---------------------------------------------------------------------------------------------------------\n  new_fresh_datom: ( P... ) => @new_datom P..., { $fresh: true, }\n\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  _get_matcher: ( selector ) ->\n    ### TAINT might make this method part of API ###\n    return R if ( R = matcher_cache.get selector )?\n    selector  = selector.replace /(?<!\\\\)\\?/g, '.?'\n    selector  = selector.replace /(?<!\\\\)\\*/g, '.*'\n    selector  = \"^(?:#{selector})$\"\n    re        = new RegExp selector, 'u'\n    R         = ( x ) -> re.test x\n    matcher_cache.set selector, R\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  select: ( d, selectors... ) =>\n    throw new Error \"Âµ86606 expected a selector, got none\" unless selectors.length > 0\n    return false unless ( ( @types.isa.object d ) and ( d.$key? ) )\n    return false if ( d.$stamped ? false )\n    #.......................................................................................................\n    for selector in selectors\n      return true if ( @_get_matcher selector ) d.$key\n    return false\n\n\n#===========================================================================================================\nclass Dataclass\n\n  #---------------------------------------------------------------------------------------------------------\n  @declaration: null\n\n  #---------------------------------------------------------------------------------------------------------\n  @_freeze_on_access: ( x ) -> new Proxy x,\n    #.......................................................................................................\n    get: ( target, key, receiver ) ->\n      Object.freeze target unless Object.isFrozen target\n      return Reflect.get target, key, receiver\n    #.......................................................................................................\n    set: ( target, key, value, receiver ) ->\n      Object.freeze target unless Object.isFrozen target\n      throw new TypeError \"Cannot assign to read only property #{rpr key} of object #{rpr target}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    clasz   = @constructor\n    __types = clasz.types ? new ( require 'intertype' ).Intertype()\n    GUY.props.hide @, '__types', __types\n    declaration = clasz.declaration\n    freezemode  = declaration?.freeze ?= 'deep'\n    if declaration?\n      @__types.declare[ clasz.name ] declaration unless @__types.isa.knowntype clasz.name\n      paragon = @__types._create_no_validation { declaration..., cfg, }\n      @__types.validate[ clasz.name ] paragon\n      @[ k ]  = v for k, v of paragon\n    return undefined if freezemode is false\n    ( R = clasz._freeze_on_access @ )[ Symbol 'test' ]\n    return R\n\n#===========================================================================================================\nmodule.exports = { Datom, DATOM: new Datom(), Dataclass, }\n\n\n\n\n"
  ]
}