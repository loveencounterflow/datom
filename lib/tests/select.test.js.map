{
  "version": 3,
  "file": "select.test.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/select.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DATOM/TESTS/SELECT'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\njr                        = JSON.stringify\n#...........................................................................................................\ntypes                     = require '../types'\n{ isa\n  validate\n  type_of }               = types\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"selector keypatterns\" ] = ( T, done ) ->\n#   probes_and_matchers = [\n#     [\"\",{\"sigils\":\"\",\"name\":\"\"},null]\n#     [\"^foo\",{\"sigils\":\"^\",\"name\":\"foo\"},null]\n#     [\"<foo\",{\"sigils\":\"<\",\"name\":\"foo\"},null]\n#     [\"  \",null,null]\n#     [\">foo\",{\"sigils\":\">\",\"name\":\"foo\"},null]\n#     [\"<>foo\",{\"sigils\":\"<>\",\"name\":\"foo\"},null]\n#     [\"<>^foo\",{\"sigils\":\"<>^\",\"name\":\"foo\"},null]\n#     [\"^ foo\",null,null]\n#     [\"^prfx:foo\",{\"sigils\":\"^\",\"prefix\":\"prfx\",\"name\":\"foo\"},null]\n#     [\"<prfx:foo\",{\"sigils\":\"<\",\"prefix\":\"prfx\",\"name\":\"foo\"},null]\n#     [\">prfx:foo\",{\"sigils\":\">\",\"prefix\":\"prfx\",\"name\":\"foo\"},null]\n#     [\"<>prfx:foo\",{\"sigils\":\"<>\",\"prefix\":\"prfx\",\"name\":\"foo\"},null]\n#     [\"<>^prfx:foo\",{\"sigils\":\"<>^\",\"prefix\":\"prfx\",\"name\":\"foo\"},null]\n#     [\"^<>\",{\"sigils\":\"^<>\",\"name\":\"\"},null]\n#     ]\n#   #.........................................................................................................\n#   for [ probe, matcher, error, ] in probes_and_matchers\n#     await T.perform probe, matcher, error, ->\n#       R = ( probe.match DATOM._selector_keypattern )?.groups ? null\n#       return null unless R?\n#       for key, value of R\n#         delete R[ key ] if value is undefined\n#       return R\n#   done()\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"datom keypatterns\" ] = ( T, done ) ->\n#   probes_and_matchers = [\n#     [\"text\",null,null]\n#     [\"^text\",{\"sigil\":\"^\",\"name\":\"text\"},null]\n#     [\"<bold\",{\"sigil\":\"<\",\"name\":\"bold\"},null]\n#     [\">bold\",{\"sigil\":\">\",\"name\":\"bold\"},null]\n#     [\"~collect\",{\"sigil\":\"~\",\"name\":\"collect\"},null]\n#     [\"~kwic:collect\",{\"sigil\":\"~\",\"prefix\":\"kwic\",\"name\":\"collect\"},null]\n#     [\"<kwic:bar\",{\"sigil\":\"<\",\"prefix\":\"kwic\",\"name\":\"bar\"},null]\n#     [\">kwic:bar\",{\"sigil\":\">\",\"prefix\":\"kwic\",\"name\":\"bar\"},null]\n#     [\">!kwic:bar\",null,null]\n#     [\"<>kwic:bar\",null,null]\n#     ]\n#   #.........................................................................................................\n#   for [ probe, matcher, error, ] in probes_and_matchers\n#     await T.perform probe, matcher, error, ->\n#       R = ( probe.match DATOM._datom_keypattern )?.groups ? null\n#       return null unless R?\n#       for key, value of R\n#         delete R[ key ] if value is undefined\n#       return R\n#   done()\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"classify_selector\" ] = ( T, done ) ->\n#   probes_and_matchers = [\n#     [\"#justatag\",[\"tag\",\"justatag\"],'illegal']\n#     [\"^bar\",[\"keypattern\",{\"sigils\":\"^\",\"name\":\"bar\"}],null]\n#     ]\n#   #.........................................................................................................\n#   for [ probe, matcher, error, ] in probes_and_matchers\n#     await T.perform probe, matcher, error, ->\n#       probe = ( -> ) if probe.startsWith '!!!'\n#       R     = DATOM._classify_selector probe\n#       if R[ 0 ] is 'keypattern'\n#         for key, value of R[ 1 ]\n#           delete R[ 1 ][ key ] if value is undefined\n#       else if R[ 0 ] is 'function'\n#         R[ 1 ] = null\n#       return R\n#   done()\n#   return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"select 2\" ] = ( T, done ) ->\n  DATOM                     = require '../..'\n  { new_datom\n    select }                = DATOM.export()\n  #.........................................................................................................\n  probes_and_matchers = [\n    [[ {$key:'^number',$value:42,$stamped:true}, '^number#stamped:*'],true]\n    [[ {$key:'<italic',$stamped:true}, '<italic#stamped:*'],true]\n    [[ {$key:'<italic',$stamped:true}, '<italic#stamped:*'],true]\n    [[ {$key:'<italic'}, '<italic#stamped:*'],true]\n    [[ {$key:'<italic',$stamped:true}, '>italic#stamped:*'],false]\n    [[ {$key:'<italic'}, '>italic#stamped:*'],false]\n    [[ {$key:'^number',$value:42,$stamped:true}, '^number'],false]\n    [[ {$key:'<italic',$stamped:true}, '<italic'],false]\n    [[ {$key:'<italic',$stamped:true}, '>italic'],false]\n    [[ {$key:'^number',$value:42}, '^number'],true]\n    [[ {$key:'<italic',$stamped:true}, '>italic'],false]\n    [[ {$key:\"*data\"},'*data'],null,'illegal selector']\n    [[ {$key:\"data>\"},'data>'],null,'illegal selector']\n    [[ {$key:\"%data\"},'%data'],null,'illegal selector']\n    [[ {$key:\"[data\"},'[data'],true,null]\n    [[ {$key:\"data]\"},'data]'],null,'illegal selector']\n    [[ {$key:\"]data\"},']data'],true,null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, ->\n      [ d, selector, ] = probe\n      return select d, selector\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"select ignores values other than PODs\" ] = ( T, done ) ->\n  DATOM                     = require '../..'\n  { new_datom\n    select }                = DATOM.export()\n  #.........................................................................................................\n  probes_and_matchers = [\n    [[ null, '^number',],false]\n    [[ 123, '^number',],false]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ d, selector, ] = probe\n      try\n        resolve select d, selector\n      catch error\n        return resolve error.message\n      return null\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"new_datom complains when value has `$key`\" ] = ( T, done ) ->\n  DATOM                     = require '../..'\n  { new_datom\n    select }                = DATOM.export()\n  #.........................................................................................................\n  probes_and_matchers = [\n    [[\"^number\",{\"$value\":123,}],{\"$key\":\"^number\",\"$value\":123},null]\n    [[\"^number\",{\"$value\":123,\"$key\":\"something\"}],null,\"value must not have attribute '\\\\$key'\"]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ key, value, ] = probe\n      resolve new_datom key, value\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"xxx\" ] = ( T, done ) ->\n  DATOM                     = require '../..'\n  { new_datom\n    select }                = DATOM.export()\n  #.........................................................................................................\n  probes_and_matchers = [\n    [['^foo', { time: 1500000, value: \"msg#1\", }],{\"time\":1500000,\"value\":\"msg#1\",\"$key\":\"^foo\"},null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ key, value, ] = probe\n      resolve new_datom key, value\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"new_datom (default settings)\" ] = ( T, done ) ->\n  DATOM                     = require '../..'\n  { new_datom\n    select }                = DATOM.export()\n  #.........................................................................................................\n  probes_and_matchers = [\n    [[\"^number\",null],{\"$key\":\"^number\"},null]\n    [[\"^number\",123],{\"$key\":\"^number\",\"$value\":123},null]\n    [[\"^number\",{\"$value\":123,}],{\"$key\":\"^number\",\"$value\":123},null]\n    [[\"^number\",{\"value\":123,}],{\"$key\":\"^number\",\"value\":123},null]\n    [[\"^number\",{\"$value\":{\"$value\":123,}}],{\"$key\":\"^number\",\"$value\": { \"$value\": 123, }, },null]\n    [[\"^number\",{\"value\":{\"$value\":123,}}],{\"$key\":\"^number\",\"value\": { \"$value\": 123, }, },null]\n    [[\"^number\",{\"$value\":{\"value\":123,}}],{\"$key\":\"^number\",\"$value\": { \"value\": 123, }, },null]\n    [[\"^number\",{\"value\":{\"value\":123,}}],{\"$key\":\"^number\",\"value\": { \"value\": 123, }, },null]\n    [[\"^value\",123],{\"$key\":\"^value\",\"$value\":123},null]\n    [[\"<start\",123],{\"$key\":\"<start\",\"$value\":123},null]\n    [[\">stop\",123],{\"$key\":\">stop\",\"$value\":123},null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ key, value, ] = probe\n      resolve new_datom key, value\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"wrap_datom\" ] = ( T, done ) ->\n  DATOM                     = require '../..'\n  { new_datom\n    wrap_datom\n    select }                = DATOM.export()\n  #.........................................................................................................\n  probes_and_matchers = [\n    [[\"^text\",'helo'],{\"$key\":\"^wrapper\",\"$value\":{\"$key\":\"^text\",\"$value\":\"helo\"}},null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ key, value, ] = probe\n      d               = new_datom key, value\n      resolve wrap_datom '^wrapper', d\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"new_datom (without value merging)\" ] = ( T, done ) ->\n  DATOM                     = new ( require '../..' ).Datom { merge_values: false, }\n  { new_datom\n    select }                = DATOM.export()\n  #.........................................................................................................\n  probes_and_matchers = [\n    [[\"^number\",null],{\"$key\":\"^number\"},null]\n    [[\"^number\",123],{\"$key\":\"^number\",\"$value\":123},null]\n    [[\"^number\",{\"$value\":123,}],{\"$key\":\"^number\",\"$value\":{\"$value\":123}},null]\n    [[\"^number\",{\"value\":123,}],{\"$key\":\"^number\",\"$value\":{\"value\":123}},null]\n    [[\"^number\",{\"$value\":{\"$value\":123,}}],{\"$key\":\"^number\",\"$value\":{\"$value\": { \"$value\": 123, }, }, },null]\n    [[\"^number\",{\"value\":{\"$value\":123,}}],{\"$key\":\"^number\",\"$value\":{\"value\": { \"$value\": 123, }}, },null]\n    [[\"^number\",{\"$value\":{\"value\":123,}}],{\"$key\":\"^number\",\"$value\":{ \"$value\": { \"value\": 123, }}, },null]\n    [[\"^number\",{\"value\":{\"value\":123,}}],{\"$key\":\"^number\",\"$value\":{ \"value\": { \"value\": 123, }}, },null]\n    [[\"^value\",123],{\"$key\":\"^value\",\"$value\":123},null]\n    [[\"<start\",123],{\"$key\":\"<start\",\"$value\":123},null]\n    [[\">stop\",123],{\"$key\":\">stop\",\"$value\":123},null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ key, value, ] = probe\n      resolve new_datom key, value\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"freezing\" ] = ( T, done ) ->\n  DATOM_FREEZE                        = new ( require '../..' ).Datom { freeze: true, }\n  { new_datom: new_datom_freeze, }    = DATOM_FREEZE.export()\n  DATOM_NOFREEZE                      = new ( require '../..' ).Datom { freeze: false, }\n  { new_datom: new_datom_nofreeze, }  = DATOM_NOFREEZE.export()\n  #.........................................................................................................\n  T.ok      Object.isFrozen new_datom_freeze    '^mykey'\n  T.ok not  Object.isFrozen new_datom_nofreeze  '^mykey'\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"_regex performance, runaway test\" ] = ( T, done ) ->\n  ###\n  See https://github.com/loveencounterflow/runaway-regex-test\n  and select-benchmark in this project\n  ###\n\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  # test @\n  test @[ \"wrap_datom\" ]\n  # test @[ \"new_datom complains when value has `$key`\" ]\n  # test @[ \"selector keypatterns\" ]\n  # test @[ \"select 2\" ]\n  # test @[ \"new_datom (default settings)\" ]\n  # debug new_datom '^helo', 42\n\n\n\n"
  ]
}