{
  "version": 3,
  "file": "vnr.test.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/vnr.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DATOM/TESTS/VNR'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\njr                        = JSON.stringify\n#...........................................................................................................\ntypes                     = require '../types'\n{ isa\n  validate\n  type_of }               = types\n#...........................................................................................................\n{ inspect }               = require 'util'\nrpr = ( P... ) ->\n  return ( \\\n    ( inspect x, { depth: Infinity, maxArrayLength: Infinity, breakLength: Infinity, compact: true, } ) \\\n      for x in P ).join ' '\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"VNR 1\" ] = ( T, done ) ->\n#   VNR                       = require '../vnr'\n#   DATOM                     = new ( require '../..' ).Datom { merge_values: false, }\n#   { new_datom\n#     select }                = DATOM.export()\n#   #.........................................................................................................\n#   probes_and_matchers = [\n#     [[\"^number\",null],{\"$key\":\"^number\"},null]\n#     ]\n#   #.........................................................................................................\n#   for [ probe, matcher, error, ] in probes_and_matchers\n#     await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n#       [ key, value, ] = probe\n#       debug '^223-1^', d = VNR.new_vnr()\n#       debug '^223-2^', d = VNR.new_vnr      [ 4, 6, 5, ]\n#       debug '^223-3^', d = VNR.deepen       d\n#       debug '^223-4^', d = VNR.deepen       d, 42\n#       debug '^223-5^', d = VNR.advance      d\n#       debug '^223-6^', d = VNR.recede       d\n#       # debug '^223-7^', d = VNR._lower_bound d\n#       # debug '^223-8^', d = VNR._upper_bound d\n#       resolve new_datom key, value\n#   done()\n#   return null\n\n#-----------------------------------------------------------------------------------------------------------\ntest_basics = ( T, VNR ) ->\n  T.eq ( d = VNR.new_vnr()                 ), [ 0, ]\n  T.eq ( d = VNR.new_vnr      [ 4, 6, 5, ] ), [ 4, 6, 5, ]\n  T.eq ( d = VNR.deepen       d            ), [ 4, 6, 5, 0, ]\n  T.eq ( d = VNR.deepen       d, 42        ), [ 4, 6, 5, 0, 42, ]\n  T.eq ( d = VNR.advance      d            ), [ 4, 6, 5, 0, 43, ]\n  T.eq ( d = VNR.recede       d            ), [ 4, 6, 5, 0, 42, ]\n  T.ok ( VNR.new_vnr  d ) isnt d\n  T.ok ( VNR.deepen   d ) isnt d\n  T.ok ( VNR.advance  d ) isnt d\n  T.ok ( VNR.recede   d ) isnt d\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"VNR 1\" ] = ( T, done ) ->\n  test_basics T, require '../vnr'\n  test_basics T, ( require '../..' ).VNR\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"VNR sort 2\" ] = ( T, done ) ->\n  VNR     = ( require '../..' ).VNR\n  matcher = [ [ 1 ], [ 1, 0 ], [ 1, 0, -1 ], [ 1, 0, 1 ], [ 2 ], [ 2, -1 ], [ 2, 0 ] ]\n  for _ in [ 1 .. 30 ]\n    probe   = CND.shuffle [ matcher..., ]\n    result  = VNR.sort probe\n    # info  '^33987-15^', rpr probe\n    # debug '^33987-15^', rpr result\n    T.ok probe isnt matcher\n    T.ok probe isnt result\n    T.eq ( VNR.sort probe ), matcher\n  done()\n  return null\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  test @\n  # test @[ \"wrap_datom\" ]\n\n\n\n\n"
  ]
}