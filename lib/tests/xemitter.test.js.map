{
  "version": 3,
  "file": "xemitter.test.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/xemitter.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DATOM/TESTS/SELECT'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\njr                        = JSON.stringify\n#...........................................................................................................\ntypes                     = require '../types'\n{ isa\n  validate\n  arity_of\n  type_of }               = types\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"_\" ] = ( T, done ) ->\n  DATOM                     = require '../..'\n  { new_datom\n    select }                = DATOM.export()\n  #.........................................................................................................\n  probes_and_matchers = [\n    [['^foo', { time: 1500000, value: \"msg#1\", }],{\"time\":1500000,\"value\":\"msg#1\",\"$key\":\"^foo\"},null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      [ key, value, ] = probe\n      resolve new_datom key, value\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"public API shape\" ] = ( T, done ) ->\n  DATOM                     = require '../..'\n  { new_datom\n    new_xemitter\n    select }                = DATOM.export()\n  #.........................................................................................................\n  XE = new_xemitter()\n  T.ok isa.asyncfunction  XE.emit\n  T.ok isa.asyncfunction  XE.delegate\n  T.ok isa.function       XE.contract\n  T.ok isa.function       XE.listen_to\n  T.ok isa.function       XE.listen_to_all\n  T.eq XE.emit.length,              2\n  T.eq XE.delegate.length,          2\n  T.eq XE.contract.length,          2\n  T.eq XE.listen_to.length,         2\n  T.eq XE.listen_to_all.length,     1\n  T.eq XE.listen_to_unheard.length, 1\n  known_keys = [ 'emit', 'delegate', 'contract', 'listen_to', 'listen_to_all', 'listen_to_unheard', ]\n  T.eq ( k for k of XE when ( not k.startsWith '_' ) and ( k not in known_keys ) ), []\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"emit equivalently accepts key, value or datom\" ] = ( T, done ) ->\n  DATOM                     = require '../..'\n  { new_datom\n    new_xemitter\n    select }                = DATOM.export()\n  #.........................................................................................................\n  count = 0\n  XE    = new_xemitter()\n  XE.listen_to '^mykey', ( d ) ->\n    count++\n    T.eq d, { $key: '^mykey', $value: 42, }\n  await XE.emit '^mykey', 42\n  await XE.emit new_datom '^mykey', 42\n  await XE.emit new_datom '^notmykey', 42\n  T.eq count, 2\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"throws when more than one contractor is added for given event key\" ] = ( T, done ) ->\n  DATOM                     = require '../..'\n  { new_datom\n    new_xemitter\n    select }                = DATOM.export()\n  XE                        = new_xemitter()\n  #.........................................................................................................\n  XE.contract '^mykey', ( d ) ->\n  XE.contract '^otherkey', ( d ) ->\n  T.throws /already has a primary listener/, ( -> XE.contract '^otherkey', ( d ) -> )\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"can listen to events that have no specific listener\" ] = ( T, done ) ->\n  DATOM                     = require '../..'\n  { new_datom\n    new_xemitter\n    select }                = DATOM.export()\n  XE                        = new_xemitter()\n  #.........................................................................................................\n  keys =\n    listen:     []\n    contract:   []\n    all:        []\n    unheard:    []\n  XE.listen_to          '^mykey',     ( d       ) ->  keys.listen   .push d.$key\n  XE.contract           '^otherkey',  ( d       ) ->  keys.contract .push d.$key\n  XE.listen_to_all                    ( key, d  ) ->  keys.all      .push d.$key\n  XE.listen_to_unheard                ( key, d  ) ->  keys.unheard  .push d.$key\n  await XE.emit '^mykey'\n  await XE.emit '^otherkey'\n  await XE.emit '^thirdkey'\n  # debug keys\n  T.eq keys, {\n    listen:   [ '^mykey',                           ],\n    contract: [ '^otherkey',                        ],\n    all:      [ '^mykey', '^otherkey', '^thirdkey', ],\n    unheard:  [ '^thirdkey',                        ], }\n  done()\n  return null\n\n\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  test @\n  # test @[ \"public API shape\" ]\n\n\n\n"
  ]
}