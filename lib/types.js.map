{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/types.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;AAAA,MAAA,GAAA,EAAA,SAAA,EAAA,UAAA,EAAA,KAAA,EAAA,IAAA,EAAA,cAAA,EAAA,OAAA,EAAA,GAAA,EAAA,MAAA,EAAA,GAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR,EAJ5B;;;;;;;;;;;EAcA,CAAA,CAAE,KAAF,CAAA,GAA4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,aAApB,CAA5B;;EACA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,IAFF,EAGE,GAHF,CAAA,GAG4B,GAAG,CAAC,GAHhC;;EAIA,CAAA,CAAE,SAAF,CAAA,GAA4B,OAAA,CAAQ,WAAR,CAA5B;;EACA,UAAA,GAA4B;;EAC5B,MAAA,GAA4B,MAAA,CAAO,QAAP,EArB5B;;;EAyBA,cAAA,GAAiB,QAAA,CAAA,CAAA;AACjB,QAAA;IAAE,IAAqB,kBAArB;AAAA,aAAO,WAAP;KAAF;;IAEE,UAAA,GAA4B,IAAI,SAAJ,CAAA;IAC5B,CAAA,CAAE,OAAF,CAAA,GAA4B,UAA5B,EAHF;;IAKE,OAAO,CAAC,qBAAR,CACE;MAAA,MAAA,EACE;QAAA,YAAA,EAAsB,SAAtB;QACA,MAAA,EAAsB,SADtB;QAEA,KAAA,EAAsB;MAFtB,CADF;MAGkC,iCAClC,OAAA,EACE;QAAA,YAAA,EAAsB,IAAtB;QACA,MAAA,EAAsB,IADtB;QAEA,KAAA,EAAsB;MAFtB;IALF,CADF,EALF;;AAakC,yCAEhC,OAAO,CAAC,WAAR,CAAoB,QAAA,CAAE,CAAF,CAAA;aAAS,MAAO,OAAP,MAAY,OAAZ,MAAiB,OAAjB,MAAsB,OAAtB,MAA2B,OAA3B,MAAgC;IAAzC,CAApB,EAfF;;IAiBE,OAAO,CAAC,SAAR,CAAkB,QAAA,CAAE,CAAF,CAAA;MAChB,KAAoB,IAAC,CAAA,GAAG,CAAC,IAAL,CAAU,CAAV,CAApB;AAAA,eAAO,MAAP;;MACA,MAAoB,CAAE,KAAK,CAAC,IAAN,CAAW,CAAX,CAAF,CAAgB,CAAC,MAAjB,IAA2B,EAA/C;AAAA,eAAO,MAAP;;AACA,aAAO,IAAC,CAAA,GAAG,CAAC,WAAL,CAAiB,CAAC,CAAE,CAAF,CAAlB;IAHS,CAAlB,EAjBF;;IAsBE,OAAO,CAAC,UAAR,CAAmB,eAAnB,EAtBF;;IAwBE,OAAO,CAAC,SAAR,CAAkB,QAAA,CAAE,CAAF,CAAA;MAChB,IAAmB,SAAnB;AAAA,eAAO,KAAP;;MACA,KAAoB,IAAC,CAAA,GAAG,CAAC,IAAL,CAAU,CAAV,CAApB;AAAA,eAAO,MAAP;;MACA,MAAoB,CAAC,CAAC,MAAF,GAAW,EAA/B;AAAA,eAAO,MAAP;;AACA,aAAO,CAAC,CAAC,KAAF,CAAQ,CAAE,CAAF,CAAA,GAAA;eAAS,IAAC,CAAA,GAAG,CAAC,SAAS,CAAC,OAAf,CAAuB,CAAvB;MAAT,CAAR;IAJS,CAAlB,EAxBF;;IA8BE,OAAO,CAAC,WAAR,CACE;MAAA,MAAA,EACE;QAAA,IAAA,EAAoB,WAApB;QACA,QAAA,EAAoB,kBADpB;QAEA,MAAA,EAAoB,kBAFpB;QAGA,MAAA,EAAoB,kBAHpB;QAIA,IAAA,EAAoB;MAJpB,CADF;MAMA,OAAA,EACE;QAAA,IAAA,EAAoB,IAApB;QACA,QAAA,EAAoB,IADpB;QAEA,MAAA,EAAoB,IAFpB;QAGA,MAAA,EAAoB;MAHpB;IAPF,CADF,EA9BF;;AA2CE,WAAO;EA5CQ,EAzBjB;;;EAwEA,MAAM,CAAC,OAAP,GAAiB,CAAE,MAAF,EAAU,cAAV;AAxEjB",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n# { alert\n#   debug\n#   help\n#   info\n#   plain\n#   praise\n#   urge\n#   warn\n#   whisper }               = GUY.trm.get_loggers 'DATOM/TYPES'\n{ debug }                 = GUY.trm.get_loggers 'DATOM/TYPES'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n{ Intertype }             = require 'intertype'\nbase_types                = null\nmisfit                    = Symbol 'misfit'\n\n\n#-----------------------------------------------------------------------------------------------------------\nget_base_types = ->\n  return base_types if base_types?\n  #.........................................................................................................\n  base_types                = new Intertype()\n  { declare }               = base_types\n  #.........................................................................................................\n  declare.datom_constructor_cfg\n    fields:\n      merge_values:         'boolean'\n      freeze:               'boolean'\n      dirty:                'boolean' ### TAINT ??? to be removed ??? ###\n    default:\n      merge_values:         true\n      freeze:               true\n      dirty:                false ### TAINT ??? to be removed ??? ###\n  #.........................................................................................................\n  declare.datom_sigil ( x ) -> x in [ '^', '<', '>', '~', '[', ']', ]\n  #.........................................................................................................\n  declare.datom_key ( x ) ->\n    return false unless @isa.text x\n    return false unless ( Array.from x ).length >= 2\n    return @isa.datom_sigil x[ 0 ]\n  #.........................................................................................................\n  declare.datom_name 'nonempty.text'\n  #.........................................................................................................\n  declare.datom_vnr ( x ) ->\n    return true unless x?\n    return false unless @isa.list x\n    return false unless x.length > 0\n    return x.every ( n ) => @isa.positive0.integer n\n  #.........................................................................................................\n  declare.datom_datom\n    fields:\n      $key:               'datom_key'\n      $stamped:           'optional.boolean'\n      $dirty:             'optional.boolean'\n      $fresh:             'optional.boolean'\n      $vnr:               'optional.datom_vnr'\n    default:\n      $key:               null\n      $stamped:           null\n      $dirty:             null\n      $fresh:             null\n  #.........................................................................................................\n  return base_types\n\n#===========================================================================================================\nmodule.exports = { misfit, get_base_types, }\n\n"
  ]
}