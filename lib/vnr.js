// Generated by CoffeeScript 2.5.1
(function() {
  'use strict';
  var CND, LFT, MAIN, Multimix, Vnr, assign, badge, debug, defaults, echo, help, info, isa, jr, rpr, types, urge, validate, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'DATOM/VNR';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  ({jr, assign} = CND);

  //...........................................................................................................
  types = require('./types');

  ({isa, defaults, validate} = types);

  Multimix = require('multimix');

  LFT = require('letsfreezethat');

  //-----------------------------------------------------------------------------------------------------------
  this.new_vnr = function(source = null) {
    if (source != null) {
      validate.vnr(source);
    } else {
      source = [0];
    }
    return assign([], source);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.deepen = function(d, nr = 0) {
    if (this.settings.validate) {
      /* Given a vectorial line number `vnr`, return a copy of `vnr`, call it
       `vnr0`, which has an index of `0` appended, thus representing the pre-first `vnr` for a level of lines
       derived from the one that the original `vnr` pointed to. */
      validate.vnr(d);
    }
    return [...d, nr];
  };

  //-----------------------------------------------------------------------------------------------------------
  this.advance = function(d) {
    return this._advance_or_recede(d, +1);
  };

  this.recede = function(d) {
    return this._advance_or_recede(d, -1);
  };

  // #-----------------------------------------------------------------------------------------------------------
  // @_lower_bound = ( vnr ) ->
  //   ### Return a new VNR `z` such that `( as_hollerith vnr ) > ( as_hollerith z )` holds; this is needed to
  //   iterate over all rows within a given limit. ###
  //   validate.vnr vnr
  //   return [ vnr[ 0 ] - 1 ]

  // #-----------------------------------------------------------------------------------------------------------
  // @_upper_bound = ( vnr ) ->
  //   ### Return a new VNR `z` such that `( as_hollerith vnr ) < ( as_hollerith z )` holds; this is needed to
  //   iterate over all rows within a given limit. ###
  //   validate.vnr vnr
  //   return [ vnr[ 0 ] + 1 ]

  //-----------------------------------------------------------------------------------------------------------
  this._advance_or_recede = function(d, delta) {
    var R;
    if (this.settings.validate) {
      /* Given a vectorial line number `vnr`, return a copy of `vnr`, call it
       `vnr0`, which has its last index incremented by `1`, thus representing the vectorial line number of the
       next line in the same level that is derived from the same line as its predecessor. */
      validate.vnr(d);
    }
    R = assign([], d);
    R[d.length - 1] += delta;
    return R;
  };

  //===========================================================================================================
  // EXPORT
  //-----------------------------------------------------------------------------------------------------------
  MAIN = this;

  Vnr = (function() {
    class Vnr extends Multimix {
      //---------------------------------------------------------------------------------------------------------
      constructor(settings = null) {
        super();
        validate.datom_vnr_settings(settings = {...defaults.vnr_settings, ...settings});
        this.settings = LFT.freeze(settings);
        this.Vnr = Vnr;
        return this;
      }

    };

    Vnr.include(MAIN, {
      overwrite: false
    });

    return Vnr;

  }).call(this);

  module.exports = new Vnr();

}).call(this);

//# sourceMappingURL=vnr.js.map
