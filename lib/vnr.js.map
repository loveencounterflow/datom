{
  "version": 3,
  "file": "vnr.js",
  "sourceRoot": "..",
  "sources": [
    "src/vnr.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DATOM/VNR'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ jr\n  assign }                = CND\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  defaults\n  validate }              = types\nMultimix                  = require 'multimix'\nLFT                       = require 'letsfreezethat'\n\n#-----------------------------------------------------------------------------------------------------------\n@new_vnr = ( source = null ) ->\n  if source? then validate.vnr source else source = [ 0, ]\n  return assign [], source\n\n#-----------------------------------------------------------------------------------------------------------\n@deepen = ( d, nr = 0 ) ->\n  ### Given a vectorial line number `vnr`, return a copy of `vnr`, call it\n  `vnr0`, which has an index of `0` appended, thus representing the pre-first `vnr` for a level of lines\n  derived from the one that the original `vnr` pointed to. ###\n  validate.vnr d if @settings.validate\n  return [ d..., nr, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@advance      = ( d ) -> @_advance_or_recede d, +1\n@recede       = ( d ) -> @_advance_or_recede d, -1\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_lower_bound = ( vnr ) ->\n#   ### Return a new VNR `z` such that `( as_hollerith vnr ) > ( as_hollerith z )` holds; this is needed to\n#   iterate over all rows within a given limit. ###\n#   validate.vnr vnr\n#   return [ vnr[ 0 ] - 1 ]\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_upper_bound = ( vnr ) ->\n#   ### Return a new VNR `z` such that `( as_hollerith vnr ) < ( as_hollerith z )` holds; this is needed to\n#   iterate over all rows within a given limit. ###\n#   validate.vnr vnr\n#   return [ vnr[ 0 ] + 1 ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_advance_or_recede = ( d, delta ) ->\n  ### Given a vectorial line number `vnr`, return a copy of `vnr`, call it\n  `vnr0`, which has its last index incremented by `1`, thus representing the vectorial line number of the\n  next line in the same level that is derived from the same line as its predecessor. ###\n  validate.vnr d if @settings.validate\n  R                   = assign [], d\n  R[ d.length - 1 ]  += delta\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@cmp = ( a, b ) ->\n  ### Given two VNRs `a` and `b`, return `-1` if `a` comes lexicographically before `b`, `+1` if `a` comes\n  after `b` and `0` if `a` equals `b`. This works by comparing all integers in `a` and `b` in a pairwise\n  fashion and stopping at the first difference; if no difference is found, then either `a` equals `b` or\n  else `a` is the prefix of `b` (so `a` comes before `b`) or vice versa. ###\n  if @settings.validate\n    validate.vnr a\n    validate.vnr b\n  max_idx = ( Math.max a.length, b.length ) - 1\n  for idx in [ 0 .. max_idx ]\n    ai = a[ idx ]\n    bi = b[ idx ]\n    return -1 if ai < bi\n    return +1 if ai > bi\n  return -1 if a.length < b.length\n  return +1 if a.length > b.length\n  return  0\n\n#-----------------------------------------------------------------------------------------------------------\n@_cmp = null\n@sort = ( vnrs ) ->\n  ### Given a list of VNRs, return a copy of the list with the VNRs lexicographically sorted. ###\n  validate.list vnrs if @settings.validate\n  return ( assign [], vnrs ).sort @_cmp ?= @cmp.bind @\n\n\n#===========================================================================================================\n# EXPORT\n#-----------------------------------------------------------------------------------------------------------\nMAIN = @\nclass Vnr extends Multimix\n  @include MAIN, { overwrite: false, }\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( settings = null ) ->\n    super()\n    validate.datom_vnr_settings settings = { defaults.vnr_settings..., settings..., }\n    @settings = LFT.freeze settings\n    @Vnr      = Vnr\n    return @\n\nmodule.exports = new Vnr()\n\n\n"
  ]
}