{
  "version": 3,
  "file": "vnr.js",
  "sourceRoot": "..",
  "sources": [
    "src/vnr.coffee"
  ],
  "names": [],
  "mappings": ";AAEA;EAAA;AAAA,MAAA,GAAA,EAAA,MAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd;;EAC5B,CAAA,CAAE,EAAF,EACE,MADF,CAAA,GAC4B,GAD5B,EAdA;;;EAiBA,KAAA,GAA4B,OAAA,CAAQ,SAAR;;EAC5B,CAAA,CAAE,GAAF,EACE,QADF,CAAA,GAC4B,KAD5B,EAlBA;;;EAsBA,IAAC,CAAA,OAAD,GAAW,CAAE,SAAS,IAAX,CAAA,GAAA;IACT,IAAG,cAAH;MAAgB,QAAQ,CAAC,GAAT,CAAa,MAAb,EAAhB;KAAA,MAAA;MAAyC,MAAA,GAAS,CAAE,CAAF,EAAlD;;AACA,WAAO,MAAA,CAAO,EAAP,EAAW,MAAX;EAFE,EAtBX;;;EA2BA,IAAC,CAAA,MAAD,GAAU,CAAE,CAAF,EAAK,KAAK,CAAV,CAAA,GAAA,EAAA;;;;IAIR,QAAQ,CAAC,GAAT,CAAa,CAAb;AACA,WAAO,CAAE,GAAA,CAAF,EAAQ,EAAR;EALC,EA3BV;;;EAmCA,IAAC,CAAA,OAAD,GAAgB,CAAE,CAAF,CAAA,GAAA;WAAS,IAAC,CAAA,kBAAD,CAAoB,CAApB,EAAuB,CAAC,CAAxB;EAAT;;EAChB,IAAC,CAAA,MAAD,GAAgB,CAAE,CAAF,CAAA,GAAA;WAAS,IAAC,CAAA,kBAAD,CAAoB,CAApB,EAAuB,CAAC,CAAxB;EAAT,EApChB;;;;;;;;;;;;;;;;;EAqDA,IAAC,CAAA,kBAAD,GAAsB,CAAE,CAAF,EAAK,KAAL,CAAA,GAAA;AACtB,QAAA,CAAA;;;;IAGE,QAAQ,CAAC,GAAT,CAAa,CAAb;IACA,CAAA,GAAsB,MAAA,CAAO,EAAP,EAAW,CAAX;IACtB,CAAC,CAAE,CAAC,CAAC,MAAF,GAAW,CAAb,CAAD,IAAsB;AACtB,WAAO;EAPa;AArDtB",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DATOM/VNR'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ jr\n  assign }                = CND\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  validate }              = types\n\n#-----------------------------------------------------------------------------------------------------------\n@new_vnr = ( source = null ) =>\n  if source? then validate.vnr source else source = [ 0, ]\n  return assign [], source\n\n#-----------------------------------------------------------------------------------------------------------\n@deepen = ( d, nr = 0 ) =>\n  ### Given a vectorial line number `vnr`, return a copy of `vnr`, call it\n  `vnr0`, which has an index of `0` appended, thus representing the pre-first `vnr` for a level of lines\n  derived from the one that the original `vnr` pointed to. ###\n  validate.vnr d\n  return [ d..., nr, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@advance      = ( d ) => @_advance_or_recede d, +1\n@recede       = ( d ) => @_advance_or_recede d, -1\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_lower_bound = ( vnr ) =>\n#   ### Return a new VNR `z` such that `( as_hollerith vnr ) > ( as_hollerith z )` holds; this is needed to\n#   iterate over all rows within a given limit. ###\n#   validate.vnr vnr\n#   return [ vnr[ 0 ] - 1 ]\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_upper_bound = ( vnr ) =>\n#   ### Return a new VNR `z` such that `( as_hollerith vnr ) < ( as_hollerith z )` holds; this is needed to\n#   iterate over all rows within a given limit. ###\n#   validate.vnr vnr\n#   return [ vnr[ 0 ] + 1 ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_advance_or_recede = ( d, delta ) =>\n  ### Given a vectorial line number `vnr`, return a copy of `vnr`, call it\n  `vnr0`, which has its last index incremented by `1`, thus representing the vectorial line number of the\n  next line in the same level that is derived from the same line as its predecessor. ###\n  validate.vnr d\n  R                   = assign [], d\n  R[ d.length - 1 ]  += delta\n  return R\n\n\n"
  ]
}