{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/xemitter.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'DATOM/XEMITTER'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\nEmittery                  = require '../deps/emittery.js'\n{ DATOM }                 = require './main'\n{ misfit\n  get_base_types\n  get_xemitter_types }    = require './types'\n\n\n#===========================================================================================================\nclass Xemitter\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    @types            = get_xemitter_types()\n    @_emitter         = new Emittery()\n    @_has_contractors = {}\n    @_has_listener    = {}\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _mark_as_primary: ( x ) => DATOM.wrap_datom '~XEMITTER-preferred', { $key: '~wrapper', $value: x, }\n  _filter_primary:  ( x ) => DATOM.select x,  '~XEMITTER-preferred'\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_primary: ( values ) =>\n    primary_responses = values.filter @_filter_primary\n    return misfit unless primary_responses.length > 0\n    return primary_responses[ 0 ]?.$value.$value\n\n  #---------------------------------------------------------------------------------------------------------\n  _datom_from_emit_arguments: ( P... ) =>\n    unless ( arity = P.length ) > 0\n      throw new Error \"µ44422 expected one or more arguments, got none\"\n    return DATOM.new_datom P[ 0 ], P[ 1 .. ]... if @types.isa.text P[ 0 ]\n    unless ( arity = P.length ) is 1\n      throw new Error \"µ44422 expected single argument unless first is key, got #{arity}\"\n    unless DATOM.is_datom d = P[ 0 ]\n      throw new Error \"µ44422 expected a text or a datom got a #{@types.type_of d}\"\n    return d\n\n\n  #=========================================================================================================\n  # API / RECEIVING\n  #---------------------------------------------------------------------------------------------------------\n  contract: ( key, listener ) =>\n    @types.validate.datom_key  key\n    @types.validate.callable   listener\n    throw new Error \"µ68704 key #{rpr key} already has a primary listener\" if @_has_contractors[ key ]\n    @_has_contractors[ key ]  = true\n    @_has_listener[ key ]     = true\n    return @_emitter.on key, ( d ) => @_mark_as_primary await listener d\n\n  #---------------------------------------------------------------------------------------------------------\n  listen_to: ( key, listener ) =>\n    @types.validate.datom_key  key\n    @types.validate.callable   listener\n    @_has_listener[ key ] = true\n    return @_emitter.on key, ( d ) => await listener d\n\n  #---------------------------------------------------------------------------------------------------------\n  listen_to_all: ( listener ) =>\n    @types.validate.callable   listener\n    return @_emitter.onAny ( key, d ) => await listener key, d\n\n  #---------------------------------------------------------------------------------------------------------\n  listen_to_unheard: ( listener ) =>\n    @types.validate.callable   listener\n    return @_emitter.onAny ( key, d ) => await listener key, d unless @_has_listener[ key ]\n\n\n  #=========================================================================================================\n  # API / SENDING\n  #---------------------------------------------------------------------------------------------------------\n  emit: ( key, d ) =>\n    d = @_datom_from_emit_arguments arguments...\n    return await @_emitter.emit d.$key, d\n\n  #---------------------------------------------------------------------------------------------------------\n  delegate: ( key, d ) =>\n    if ( R = @_get_primary await @emit arguments... ) is misfit\n      throw new Error \"µ83733 no results for #{rpr key.$key ? key}\"\n    return R\n\n\n\nmodule.exports = { Xemitter, XEMITTER: new Xemitter(), }\n"
  ]
}